---
title: "Teams stats"
# subtitle: |
#   These are the fantastic people that have decided to participate
#   to the PRC Data Challenge 2025.
listing:
  id: teams-listings
  contents: "*.qmd"
  field-display-names:
    title: "Team"
    date: "Request date"
    subtitle: "Country"
  fields: [title, subtitle, date]
#   # sort: "date desc"
  type: table
  date-format: "iso"
#   # categories: unnumbered
#   # sort-ui: false
  filter-ui: [title, subtitle, date]
#   # image-align: left
#   # image-height: 1.75in
# title-block-banner: false

format:
  html:
    toc: true
    toc-depth: 2

acronyms:
  insert_loa: false
---


```{r setup, echo=FALSE, warning=FALSE, error=FALSE, message=FALSE}
library(conflicted)
library(dplyr)
library(here)
library(purrrlyr)
library(countrycode)

conflicts_prefer(dplyr::filter)

here("R", "helpers.R") |> source()

teams_raw <- get_teams_raw()

teams_valid <- teams_raw |> get_teams_valid()

members <- teams_raw |> get_teams_members()

ttt <- teams_valid |>
  mutate(registration_date = as_date(timestamp)) |> 
  complete(registration_date = seq(ymd("2025-09-30"),
                                   ymd("2025-12-01"),
                                   by = "day"))

ccc <- teams_valid |> 
  count(team_country) |> 
  mutate(
    team_country = if_else(
      team_country == "Ireland {Republic}",
      "Ireland",
      team_country),
    NULL
  ) |>
  mutate(
    iso3c = countrycode(team_country, 'country.name', 'iso3c')) |> 
  write_csv(here::here("data", "teams_country@36.csv"))



counts_in_time <- ttt |> 
  select(team_name, registration_date) |> 
  mutate(n = if_else(is.na(team_name), 0L, 1L)) |> 
  arrange(registration_date) |> 
  group_by(registration_date) |>
  summarise(across(n, ~ sum(.x, na.rm = TRUE))) |> 
  mutate(future = registration_date > today())

# ojs_define(teams_in_time = counts_in_time)

number_of_teams <- counts_in_time |> 
  summarise(across("n", ~ sum(.x, na.rm = TRUE))) |> 
  pull(n)

cumulative_counts_in_time <- counts_in_time |> 
  mutate(n = cumsum(n)) |> 
  write_csv(here::here("data", "cumulative_registration_dc2025.csv"))
```


```{r table-countries, eval=FALSE}
#| echo: false
#| warning: false
library(tidyverse)
library(ggplot2)
library(jsonlite)
library(here)
library(gt)

ccc |> 
  dplyr::select(-iso3c) |> 
  dplyr::arrange(desc(n), team_country) |> 
  gt() |>
  cols_label(
    team_country = md("**Country**"),
    n = md("**# of teams**")
  )
```



```{r cumulative-plot-kk, echo=FALSE, warning=FALSE, error=TRUE, message=FALSE}
#| fig-cap: 'Cumulative count of team creation, 2025 in **[blue]{fg="#0000FF"}**, 2024 in **[green]{fg="#008000"}**.'

phase1_start_25 <- as_datetime("2025-10-01T00:00:00Z")
phase1_end_25 <- as_datetime("2025-11-09T23:59:59Z")
phase2_start_25 <- as_datetime("2025-11-10T00:00:00Z")
phase2_end_25 <- as_datetime("2025-12-01T23:59:59Z")

phase1_start_24 <- as_datetime("2024-08-01T00:00:00Z")
phase1_end_24 <- as_datetime("2024-10-17T00:00:00Z")
phase2_start_24 <- as_datetime("2024-10-17T18:16:00Z")
phase2_end_24 <- as_datetime("2024-10-28T00:00:00Z")


cum_24 <- here::here("data", "cumulative_registration_dc2024.csv") |>
  read_csv() |>
  mutate(
    registration_date = if_else(
      registration_date == ymd("2024-07-28"),
      ymd("2024-07-31"),
      registration_date
    ),
    registration_date_orig = registration_date,
    registration_date = registration_date + (phase1_start_25 - phase1_start_24),
    future = FALSE,
    NULL
  )

cum_25 <- here::here("data", "cumulative_registration_dc2025.csv") |>
  read_csv() |>
  mutate(dc = 2025) |>
  select(dc, registration_date, n, future)

max_25 <- cum_25 |>
  slice(which.max(registration_date))
max_24 <- cum_24 |>
  slice(which.max(registration_date))

ggplot() +
  # 2024
  geom_step(
    data = cum_24,
    aes(x = registration_date, y = n, linetype = future),
    colour = "#008000",
    stat = "identity"
  ) +
  geom_text(
    data = max_24,
    aes(x = registration_date, y = n, label = n),
    size = 4,
    vjust = -0.5,
    colour = "#008000"
  ) +
  # 2025
  geom_step(
    data = cum_25,
    aes(x = registration_date, y = n, linetype = future),
    colour = "blue",
    stat = "identity"
  ) +
  geom_text(
    data = max_25,
    aes(x = registration_date, y = n, label = n),
    colour = "blue",
    size = 4,
    vjust = -0.5
  ) +
  annotate(
    geom = "segment",
    x = as_date(phase2_start_25),
    y = 35,
    xend = as_date(phase2_start_25),
    yend = max_25 |> pull(n),
    arrow = arrow(length = unit(2, "mm"))
  ) +
  annotate(
    geom = "text",
    x = as_date(phase2_start_25) - ddays(8),
    y = 25,
    label = paste0(
      "Start of final phase\n   (",
      as_date(phase2_start_25),
      ")"
    ),
    hjust = "left"
  ) +
  annotate(
    geom = "segment",
    x = as_date(phase2_end_25),
    y = 60,
    xend = as_datetime(phase2_end_25),
    yend = max_25 |> pull(n),
    arrow = arrow(length = unit(2, "mm"))
  ) +
  annotate(
    geom = "text",
    x = as_date(phase2_end_25) - ddays(8),
    y = 50,
    label = paste0(
      "End of submissions\n(",
      phase2_end_25,
      ")"
    ),
    hjust = "left"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    # axis.text.x = element_blank(),
    # axis.ticks.x = element_blank(),
    legend.position = "none",
    NULL
  )
```


```{ojs kk}
//| echo: false
d3 = require.alias({
  d3: 'd3@7.7.0/dist/d3.min.js',
  'd3-geo': 'd3@7.7.0/dist/d3.min.js',
  'd3-array': 'd3@7.7.0/dist/d3.min.js',
  'd3-geo-projection': 'd3-geo-projection@4.0.0/dist/d3-geo-projection.min.js',
  'd3-geo-polygon': 'd3-geo-polygon@1.12.1/dist/d3-geo-polygon.min.js'
})('d3', 'd3-geo-projection', 'd3-geo-polygon')

world = FileAttachment('../data/world.topo.json').json()

land = topojson.feature(world, world.objects.land)

countries = topojson.feature(world, world.objects.countries)

teams_country = FileAttachment('../data/teams_country@36.csv').csv({ typed: true })

origin = new Map(teams_country.map((d) => [d.iso3c, +d.n]))

countries_without_antarctica = {
  var l = JSON.parse(JSON.stringify(countries)); // clone (useless here but a good idea in general)
  // remove antarctica, i.e. code "010"
  l.features = l.features.filter((d) => d.id != '010');
  return l;
}

projection = d3['geoBertin1953']().rotate([-4, -43]).precision(0.1)

Plot.plot({
  width: 1000,
  height: 560,
  margin: 5,
  projection: projection,
  color: {
    type: 'quantize',
    n: 11,
    // unknown: '#ced4da',
    domain: [1, 18],
    scheme: 'reds',
    label: 'Number of teams',
    legend: true
  },
  marks: [
    Plot.sphere({
      // fill: d3.rgb(241, 246, 251).formatHex(),
      fill: '#00FFFF',
      opacity: 0.3,
      stroke: 'currentColor'
    }),
    Plot.geo(countries_without_antarctica, { fill: '#FFFFFF', opacity: 1 }),
    Plot.geo(
      countries_without_antarctica.features.filter(
        (d) => !["GUF"].includes(d.properties.name)
      ),
      Plot.centroid({
        fill: (d) => origin.get(d.properties.a3),
        tip: true,
        channels: {
          Country: (d) => d.properties.name
        }
      })
    ),
    Plot.geo(countries_without_antarctica, { stroke: 'black' })
  ]
})
```


```{r teams-bar-kk, echo=FALSE, warning=FALSE, error=FALSE, message=FALSE, eval=TRUE}
#| fig-cap: 'Teams per country'
library(countrycode)
library(scales)

teams_valid |> 
  count(team_country) |> 
  mutate(
    team_country = if_else(team_country == "Ireland {Republic}",
                           "Ireland",
                           team_country),
    team_country = fct_reorder(team_country, n)) |> 
  ggplot() +
  geom_bar(aes(x = team_country, y = n) , stat="identity") +
  scale_y_continuous(
    breaks = breaks_pretty(),
    sec.axis = dup_axis(),
    expand = expansion(0)) +
  coord_flip() +
  labs(y = "Number of teams") +
  theme_minimal() +
  theme(axis.title.y = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_blank(),
        # prism.ticks.length.y = unit(20, "pt"),
        # axis.ticks.length = unit(1, "cm"),
        NULL)
```


## Teams

::: {#teams-listings}
:::
